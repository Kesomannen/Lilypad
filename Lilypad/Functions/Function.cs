namespace Lilypad; 

/// <summary>
/// Represents a .mcfunction resource.
/// </summary>
public class Function : Resource {
    readonly List<Action<Function>> _generators = new();
    readonly List<string> _commands = new();

    /// <summary>
    /// If true, this function is currently being generated or has been generated.
    /// </summary>
    public bool IsGenerating { get; private set; }

    /// <summary>
    /// Returns an enumerable of all commands in this function. Ignores empty lines and comments.
    /// </summary>
    /// <remarks>Returns an empty enumerable when called before function generation.</remarks>
    public IEnumerable<string> Commands => GetContent().Split("\n")
        .Where(s => !string.IsNullOrWhiteSpace(s) && !s.StartsWith("#"));
    
    internal Function(string name, string @namespace, Datapack datapack) : base(name, @namespace, datapack) { }
    
    /// <summary>
    /// Adds a generator that will be executed at generation time,
    /// or immediately if the function is already being generated.
    /// </summary>
    public Function Add(Action<Function> generator) {
        if (IsGenerating) {
            generator(this);
        } else {
            _generators.Add(generator);
        }
        return this;
    }
    
    /// <summary>
    /// Adds a single command generator. Will be executed at generation time,
    /// or immediately if the function is already being generated.
    /// </summary>
    public Function Add(Func<string> generator) {
        return Add(f => f.Add(generator()));
    }
    
    /// <summary>
    /// Adds a multiple command generator. Will be executed at generation time,
    /// or immediately if the function is already being generated.
    /// </summary>
    public Function Add(Func<IEnumerable<string>> generator) {
        return Add(f => f.Add(generator()));
    }
    
    /// <summary>
    /// Adds a single command immediately.
    /// </summary>
    public Function Add(string command) {
        if (!IsGenerating) {
            return Add(() => command);
        }

        _commands.Add(command);
        return this;
    }
    
    /// <summary>
    /// Adds multiple commands immediately.
    /// </summary>
    public Function Add(IEnumerable<string> commands) {
        if (!IsGenerating) {
            return Add(() => commands);
        }
        
        _commands.AddRange(commands);
        return this;
    }

    /// <summary>
    /// Sets the function to be called at a given interval.
    /// </summary>
    public Function SetLoop(float seconds) {
        return SetLoad().Schedule(seconds, this);
    }

    /// <summary>
    /// Sets the function to be called every tick.
    /// </summary>
    public Function SetTick() {
        return AddToMinecraftTag("tick");
    }

    /// <summary>
    /// Sets the function to be called when the datapack is loaded or <c>/reload</c> is called.
    /// </summary>
    public Function SetLoad() {
        return AddToMinecraftTag("load");
    }

    Function AddToMinecraftTag(string name) {
        var tag = Datapack.FunctionTags.GetOrCreate(name, "minecraft");
        tag.Add(this);
        return this;
    }

    internal void Generate() {
        _commands.Clear();
        _commands.Add("# Generated by Lilypad\n");
        
        IsGenerating = true;
        foreach (var generator in _generators) {
            generator(this);
        }
    }
    
    public string GetContent() {
        return IsGenerating ? string.Join('\n', _commands) : $"# Function {Name} has not been generated yet";
    }
}