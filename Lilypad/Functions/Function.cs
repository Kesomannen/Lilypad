namespace Lilypad; 

public class Function : Resource {
    readonly List<CommandGenerator> _generators = new();
    readonly List<string> _commands = new();
    
    bool _isGenerating;
        
    public IEnumerable<string> Commands => ToString().Split("\n")
        .Where(s => !string.IsNullOrWhiteSpace(s) && !s.StartsWith("#"));
    
    internal Function(string name, string @namespace, Datapack datapack) : base(name, @namespace, datapack) { }
    
    public Function Add(CommandGenerator generator) {
        if (_isGenerating) {
            generator(this);
        } else {
            _generators.Add(generator);
        }
        return this;
    }
    
    public Function Add(Func<string> generator) {
        return Add(f => f.Add(generator()));
    }
    
    public Function Add(Func<IEnumerable<string>> generator) {
        return Add(f => f.Add(generator()));
    }
    
    public Function Add(IEnumerable<string> commands) {
        if (!_isGenerating) {
            return Add(() => commands);
        }
        
        _commands.AddRange(commands);
        return this;
    }
    
    public Function Add(string command) {
        if (!_isGenerating) {
            return Add(() => command);
        }

        _commands.Add(command);
        return this;
    }
    
    public Function SetTick() => AddToMinecraftTag("tick");
    public Function SetLoad() => AddToMinecraftTag("load");

    Function AddToMinecraftTag(string name) {
        var tag = Datapack.FunctionTags.GetOrCreate(name, "minecraft");
        tag.Add(this);
        return this;
    }

    public Function SetLoop(float seconds) {
        return SetLoad().Schedule(seconds, this);
    }

    internal void Generate() {
        _commands.Clear();
        _commands.Add("# Generated by Lilypad\n");
        
        _isGenerating = true;
        foreach (var generator in _generators) {
            generator(this);
        }
    }
    
    public override string ToString() {
        return _isGenerating ? string.Join('\n', _commands) : $"# Function {Name} has not been generated yet";
    }
}

public delegate void CommandGenerator(Function function);