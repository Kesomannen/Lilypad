using System.Text;
using Lilypad.Text;

namespace Lilypad; 

public class Function : Resource {
    internal List<object> Commands { get; } = new();

    public Function(string name, Datapack datapack) : base(name, datapack) { }
    
    public Execute Execute() => AddAndReturn(new Execute(this));

    public Function Gamemode(Argument<Selector> selector, EnumReference<Gamemode> gamemode) {
        return Add($"gamemode {gamemode} {selector}");
    }
    
    public Function Gamemode(EnumReference<Gamemode> gamemode) {
        return Gamemode(Selector.Self, gamemode);
    }
    
    public Function Call(Reference<Function> function) {
        return Add($"function {function}");
    }
    
    public Function Say(string message) {
        return Add($"say {message}");
    }
    
    public Function Tellraw(Argument<Selector> selector, RichText message) {
        return Add($"tellraw {selector} {message}");
    }
    
    public Function Tellraw(RichText message) {
        return Tellraw(Selector.Self, message);
    }
    
    public Function Effect(Argument<Selector> selector, EnumReference<Effect> effect, int seconds, int amplifier, bool invisible = true) {
        return Add($"effect give {selector} {effect} {seconds} {amplifier} {(invisible ? "true" : "false")}");
    }
    
    public Function Effect(Effect effect, int seconds, int amplifier, bool invisible = true) {
        return Effect(Selector.Self, effect, seconds, amplifier, invisible);
    }

    Function Add(object command) {
        Commands.Add(command!);
        return this;
    }
    
    T AddAndReturn<T>(T command) {
        Commands.Add(command!);
        return command;
    }

    public Function SetTick() => AddToMinecraftTag("tick");
    public Function SetLoad() => AddToMinecraftTag("load");

    Function AddToMinecraftTag(string name) {
        var tag = Datapack.FunctionTags.GetOrCreate(name, Namespaces.Minecraft);
        tag.Add(this);
        return this;
    }

    public override string ToString() {
        var builder = new StringBuilder();
            
        builder.AppendLine("# Generated by Lilypad");
        builder.AppendLine();
            
        foreach (var command in Commands) {
            builder.AppendLine(command.ToString());
        }
            
        return builder.ToString();
    }
}