using Lilypad.ItemModifiers;
using Newtonsoft.Json;

namespace Lilypad; 

public class LootTable : Resource {
    /// <summary>
    /// Specifies the context in which the loot table should be invoked.
    /// </summary>
    /// <remarks>
    /// All item functions, predicates and number providers are validated
    /// to ensure the parameters of the context type cover all requirements,
    /// and prints a warning message in the output log if any function or
    /// condition requires a context parameter that is not covered.
    /// </remarks>
    [JsonProperty("type")]
    public EnumReference<LootContext>? Context;
    
    /// <summary>
    /// Invoked on all item stacks generated by the loot table.
    /// </summary>
    public List<ItemFunction>? Functions;
    
    /// <summary>
    /// List of loot pools to generate items from.
    /// </summary>
    public List<LootPool>? Pools;
    
    /// <summary>
    /// A resource location specifying the name of the random sequence that is used to generate loot from this loot table.
    /// </summary>
    /// <remarks>
    /// If only one loot table uses a specific random sequence,
    /// the order of the randomized sets of items generated is the
    /// same for every world using the same world seed.
    ///
    /// <br/><br/>If multiple loot tables use the same random sequence,
    /// the loot generated from any one of them changes depending
    /// on how many times and in what order any of the other loot tables were invoked.
    /// </remarks>
    public string? RandomSequence;
    
    internal LootTable(string name, string @namespace, Datapack datapack) : base(name, @namespace, datapack) { }
    
    public LootTable SetContext(EnumReference<LootContext> context) {
        Context = context;
        return this;
    }
    
    public LootTable AddFunctions(params ItemFunction[] functions) {
        Functions ??= new List<ItemFunction>();
        Functions.AddRange(functions);
        return this;
    }
    
    public LootTable AddPools(params LootPool[] pools) {
        Pools ??= new List<LootPool>();
        Pools.AddRange(pools);
        return this;
    }
    
    public LootTable SetRandomSequence(string location) {
        RandomSequence = location;
        return this;
    }
}